==============■画像とコントローラ ===============
前節で作成した「image_publisher」ノードをロボット（Raspberry Pi）に移植して
、ロボット側のWEBカメラ画像をノートPCで確認できるようにします。
最初にRaspberry PiでWEBカメラを使えるようにユーザーの設定をします。
カメラを接続して、「Visual Studio Code」で左下ボタンからホスト名
「pi@raspi4.local」、パスワードを入力して、Raspberry PiにSSH接続してください
。下記を入力します。  
R:$ sudo usermod –aG video pi
「pi」はそれぞれのユーザー名で変えてください。実行後、
Raspberry Piを「sudo reboot」で再起動します。
「ros2_ws/src」に移動してパッケージとノードを作成します。
今回はSubscriberはありません。   
R:$ source /opt/ros/humble/setup.bash  
R:$ cd ros2_ws/src  
R:~/ros2_ws/src$ 
ros2 pkg create –-build-type ament_python –-node-name image_publisher image_pub  
Raspberry PiにもOpenCVをインストールします。  
R:$ sudo apt install python3-pip
R:$ pip3 install opencv-contrib-python==4.6.0.66
「Visual Studio Code」で「image_publisher.py」を開いてプログラムを作成します。
前節の「image_publisher.py」を元に改造してください。
画像変換の部分は削除して、代わりに画像サイズを縮小するコードを入れておきます。
WiFi経由の画像トピック送信では、大きなサイズのままではフリーズしてしまいます。
また今回はcv2.VideoCapture(0)の数値はゼロになっていると思います。  
==========リスト6-5 image_publisher.py===================
「setup.py」に追記します。 
entry_points={ 'console_scripts': [            
‘img_publisher = image_pub.image_publisher:main’,
],
CTL+Sで保存してからビルドして実行します。  
R:~/ros2_ws$ rosdep install -i --from-path src --rosdistro humble -y
R:~/ros2_ws$ colcon build --packages-select image_pub
R:~/ros2_ws$ source install/setup.bash
R:~/ros2_ws$ ros2 run image_pub img_publisher
そしてRaspberry Pi側でもう一つ、第５章で作成した動作コマンドのSubscriberを
走らせます。「Visual Studio Code」のターミナルで右クリックして「Split Terminal」で
新しいターミナルを起動します。 
R:~/ros2_ws$ source /opt/ros/humble/setup.bash
R:~/ros2_ws$ sudi pigpiod
R:~/ros2_ws$ colcon build --packages-select robot_controller
R:~/ros2_ws$ source install/setup.bash
R:~/ros2_ws$ ros2 run robot_controller action
ノートPC側では、新たに「Terminator」を起動して二つに分割し、
「img_subscriber」ノードと「command_publisher_gui」ノードを走らせます。 
ひとつ目のターミナルで、   
~$ source /opt/ros/humble/setup.bash
~$ cd ros2_ws   ~/ros2_ws$ source install/setup.bash
~/ros2_ws$ ros2 run image_pubsub img_subscriber  もう一方で、
~$ source /opt/ros/humble/setup.bash
~$ cd ros2_ws   ~/ros2_ws$ source install/setup.bash
~/ros2_ws$ ros2 run robot_controller_gui command_publisher_gui
として合計４つのノードを起動します。ノートPCからロボットの画像を見ながら操縦
できることを確認してください。
========Fig 6-7==========
==================■ローンチファイル================= 
ここでローンチファイルを紹介しておきます。複数のノードを起動するアプリケーションの場合等で、
ターミナルをいくつも立ち上げてコマンドを入力して、というというのは面倒です。
このようなときにはローンチファイルと呼ばれるものを作ることで一つのコマンドで実行することができます。
ノートPC側の２つのノードをまとめるローンチファイルを作ってみます。
「image_pubsub」パッケージと「robot_controller_gui」パッケージが関係しますが、
その片方の「image_pubsub」ディレクトリの直下に「launch」というディレクトリと、
その中に「my_launch.py」というファイル（名前は何でもよい）を作成します。
~/ros2_ws$ cd src/image_pubsub
~/ros2_ws/src/image_pubsub$ mkdir launch
~/ros2_ws/src/image_pubsub$ cd launch
~/ros2_ws/src/image_pubsub/launch $ touch my_launch.py
「my_launch.py」の中身を記述します。「package」にパッケージ名を、
「executable」にノード名（setup.pyに記述した名前）を書きます。
==========リスト6-6 my_launch.py===============
さらに「setup.py」に１行追記します。   data_files=[
# 略     
(os.path.join('share', package_name), glob('launch/*_launch.py')), 
],  ビルドして実行します。  
~/ros2_ws$ colcon build –packages-select image_pubsub
~/ros2_ws$ source install/setup.bash
~/ros2_ws$ ros2 launch image_pubsub my_launch.py
「img_subscriber」と「command_publisher_gui」が同時に起動することを確認してください。
===================■画像とコントローラ=======================  
ノートPCで作成した「image_publisher」ノード（ArUcoマーカーの検出）と、
Raspberry Piの「command_subscriber」ノードを合わせて、ArUcoマーカーをロボットに見せて操縦するアプリを作ります。
今回はロボット側で完結する仕様です。マーカーは１個ずつ切り離してカード状にしておきます。
どのカードかわかるようにしておいてください。  「ros2_ws/src」に移動して
パッケージとノードを作成します。 
R:$ source /opt/ros/humble/setup.bash
R:$ cd ros2_ws/src
R:~/ros2_ws/src$ ros2 pkg create –-build-type ament_python –-node-name controller_node aruco_controller  
今回は、一つのノード（aruco_controller.py）の中にカメラから受け取ったコマンドをPublishするPublisherと
コマンドを受け取るSubscriberが入っています。またコマンドは、少しずつ速度を
変えるのではなく、一定の目標速度を与えるようにしています。  
============リスト6-6 aruco_controller.py==================
「setup.py」を変更してから、   entry_points={ 'console_scripts': [    
'controller_node = aruco_controller. aruco_controller:main',
],   },  ビルドして実行します。  
R:~/ros2_ws$ source /opt/ros/humble/setup.bash
R:~/ros2_ws$ sudi pigpiod
R:~/ros2_ws$ colcon build --packages-select aruco_controller
R:~/ros2_ws$ source install/setup.bash 
R:~/ros2_ws$ ros2 run aruco_controller controller_node 

















